# syntax=docker/dockerfile:1

################################################################################
# Stage 1: Dependency resolution
################################################################################
FROM eclipse-temurin:21-jdk-jammy AS deps

WORKDIR /build

# Copy Maven Wrapper and ensure execution
COPY --chmod=0755 rabbit-sequoia-spring/mvnw /build/mvnw
COPY rabbit-sequoia-spring/.mvn/ .mvn/
COPY rabbit-sequoia-spring/pom.xml pom.xml

# Download dependencies without running tests
RUN --mount=type=cache,target=/root/.m2 /build/mvnw dependency:go-offline -DskipTests

################################################################################
# Stage 2: Build application
################################################################################
FROM deps AS package

WORKDIR /build

COPY rabbit-sequoia-spring/src src/
COPY rabbit-sequoia-spring/pom.xml pom.xml

# Build the application and extract the final JAR name dynamically
RUN --mount=type=cache,target=/root/.m2 /build/mvnw package -DskipTests && \
    JAR_NAME=$(ls target/*.jar | head -n 1) && \
    mv "$JAR_NAME" target/app.jar

################################################################################
# Stage 3: Extract layers from JAR
################################################################################
FROM package AS extract

WORKDIR /build

RUN java -Djarmode=layertools -jar target/app.jar extract --destination target/extracted

################################################################################
# Stage 4: Runtime environment
################################################################################
FROM eclipse-temurin:21-jre-jammy AS final

ARG UID=10001

# Create a non-root user for security
RUN adduser \
    --disabled-password \
    --gecos "" \
    --home "/nonexistent" \
    --shell "/sbin/nologin" \
    --no-create-home \
    --uid "${UID}" \
    appuser

USER appuser

WORKDIR /app

# Copy extracted JAR layers to optimize startup
COPY --from=extract /build/target/extracted/dependencies/ ./
COPY --from=extract /build/target/extracted/spring-boot-loader/ ./
COPY --from=extract /build/target/extracted/snapshot-dependencies/ ./
COPY --from=extract /build/target/extracted/application/ ./

# Expose application port
EXPOSE 8081

# Start the Spring Boot application
ENTRYPOINT ["java", "org.springframework.boot.loader.launch.JarLauncher"]